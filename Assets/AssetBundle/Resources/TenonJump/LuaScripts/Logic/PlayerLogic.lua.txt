---@class LuaClass.TenonJump.PlayerLogic : LuaClass.LuaBehaviour
---@field accelerate number
---@field upVelocity number
---@field animation UnityEngine.Animation
---@field dieGo UnityEngine.GameObject
---@field idleGo UnityEngine.GameObject
---@field hitGo UnityEngine.GameObject
---@field fastGo UnityEngine.GameObject
---@field superFastGo UnityEngine.GameObject
---@field private velocity number
---@field private startLayerIndex number
---@field private lastPassedLayerIndex number
---@field private lastScoreLayerIndex number
---@field private relive boolean
local m = LuaClass.Class("TenonJump", "PlayerLogic", LuaClass.LuaBehaviour);
---@type LuaClass.TenonJump
local ns = LuaClass.TenonJump;
ns.PlayerLogic = m;

function m:Awake()
    self.velocity = 0;
    self.startLayerIndex = 1;
    self.lastPassedLayerIndex = 0;
    self.lastScoreLayerIndex = 1;
    self.relive = false;
end

function m:FixedUpdate()
    if LuaClass.TenonJump.GameController.Instance.gameState == LuaClass.TenonJump.GameState.Die
    or LuaClass.TenonJump.GameController.Instance.gameState == LuaClass.TenonJump.GameState.Finish
    or LuaClass.TenonJump.GameController.Instance:IsPaused() then
        return;
    end

    local t = CS.UnityEngine.Time.deltaTime;
    local pos = self.m_CSBehaviour.transform.position;
    pos.y = pos.y + self.velocity * t + 0.5 * self.accelerate * t * t;
    local oldV = self.velocity;
    self.velocity = self.velocity + self.accelerate * t;
    if oldV >= 0 and self.velocity <= 0 then
        self:PlayDownAnim();
    end
    self.m_CSBehaviour.transform.position = pos;

    local totalLayerCount = #LuaClass.TenonJump.GameController.Instance.obstacleList;
    for layerIndex = 1 , totalLayerCount do
        if self.m_CSBehaviour.transform.position.y < (48 - layerIndex * 8 - 0.5) and self.lastPassedLayerIndex < layerIndex then
            self.lastPassedLayerIndex = layerIndex;
            LuaClass.TenonJump.GameController.Instance:PassLayer(layerIndex);
            local deltaLayers = layerIndex - self.startLayerIndex;
            if deltaLayers > 1 then
                self:PlaySuperFast();
            elseif deltaLayers > 0 then
                self:PlayFast();
            end
            local deltaScoreLayers = layerIndex - self.lastScoreLayerIndex + 1;
            if deltaScoreLayers == 1 and self.relive then
                self.relive = false;
            else
                LuaClass.TenonJump.GameDataManager.Instance:AddScore(deltaScoreLayers);
            end
            CS.Main.ListenerManager.TriggerExt(LuaClass.TenonJump.ListenerType.LevelProgress, self.lastPassedLayerIndex/(totalLayerCount-1));
        end
    end
end

---@private
---@param colliderOther UnityEngine.Collider
function m:OnTriggerEnter(colliderOther)
    ---@type Main.LuaBehaviour
    local luaBehaviourComponent = colliderOther.transform.parent.parent.parent.parent:GetComponent(typeof(CS.Main.LuaBehaviour));
    if not luaBehaviourComponent then
        luaBehaviourComponent = colliderOther.transform.parent.parent.parent.parent.parent:GetComponent(typeof(CS.Main.LuaBehaviour));
    else
        local pos = self.m_CSBehaviour.transform.position;
        pos.y = colliderOther.transform.position.y + 1.3;
        self.m_CSBehaviour.transform.position = pos;
        self.velocity = self.upVelocity;
    end

    self:PlayHit();
    self:PlayHitDecal(colliderOther.transform);
    self:StopFast();
    self:StopSuperFast();

    ---@type LuaClass.TenonJump.ObstacleLogic
    local obstacleLogic = luaBehaviourComponent.LuaTable;

    if obstacleLogic.finish then
        LuaClass.TenonJump.GameController.Instance.gameState = LuaClass.TenonJump.GameState.Finish;
        CS.Main.ListenerManager.TriggerExt(LuaClass.TenonJump.ListenerType.LevelProgress, 1);
        LuaClass.TenonJump.GameDataManager.Instance:AddScore(math.floor(LuaClass.TenonJump.ConstValue.FINISH_SCORE / LuaClass.TenonJump.ConstValue.BASE_SCORE));
        self:PlayVictory();
        LuaClass.TenonJump.GameController.Instance:GameOver(LuaClass.TenonJump.ResultType.Finish);
        return;
    end

    local deltaLayers = obstacleLogic.layerIndex - self.startLayerIndex;
    if deltaLayers > 2 then
        LuaClass.AudioManager.Instance:PlayModuleSceneOneShot(LuaClass.ModuleType.TenonJump, "Obstacle_Break");
        LuaClass.TenonJump.GameController.Instance:BreakLayer(obstacleLogic.layerIndex);
        CS.Main.ListenerManager.TriggerExt(LuaClass.TenonJump.ListenerType.Wonderful);
        self:PlayUpAnim();

        local deltaScoreLayers = obstacleLogic.layerIndex - self.lastScoreLayerIndex + 1;
        LuaClass.TenonJump.GameDataManager.Instance:AddScore(deltaScoreLayers);
        self.lastScoreLayerIndex = obstacleLogic.layerIndex + 1;
    else
        if obstacleLogic.die then
            LuaClass.TenonJump.GameController.Instance.gameState = LuaClass.TenonJump.GameState.Die;
            self:PlayDie();
            LuaClass.TenonJump.GameController.Instance:DieReset(obstacleLogic.layerIndex);
        else
            self:PlayUpAnim();
        end
        self.lastScoreLayerIndex = obstacleLogic.layerIndex;
    end
    self.startLayerIndex = obstacleLogic.layerIndex;
end

function m:PlayDie()
    self.dieGo:SetActive(true);
    self.animation:Play("die");
    LuaClass.AudioManager.Instance:PlayModuleSceneOneShot(LuaClass.ModuleType.TenonJump, "Logic_Die");
end

function m:StopDie()
    self.dieGo:SetActive(false);
end

function m:PlayVictory()
    self.animation:Play("victory");
    LuaClass.AudioManager.Instance:PlayModuleSceneOneShot(LuaClass.ModuleType.TenonJump, "Logic_Finish");
end

function m:PlayIdle()

end

function m:PlayFast()
    self.fastGo:SetActive(true);
end

function m:StopFast()
    self.fastGo:SetActive(false);
end

function m:PlaySuperFast()
    self.superFastGo:SetActive(true);
end

function m:StopSuperFast()
    self.superFastGo:SetActive(false);
end

function m:DoPlayHit()
    return util.cs_generator(function()
        self.hitGo:SetActive(true);
        coroutine.yield(CS.UnityEngine.WaitForSeconds(0.5));
        self.hitGo:SetActive(false);
    end);
end

function m:PlayHit()
    CS.Main.CoroutineManager.Start(self:DoPlayHit(), self.m_CSBehaviour);
end

---@param parent UnityEngine.Transform
function m:PlayHitDecal(parent)
    local relativePath = "Prefab/hit_decal";
    local bgEffectPrefab = LuaClass.AssetLoadManager.Instance:Load(LuaClass.ModuleType.TenonJump, relativePath, typeof(CS.UnityEngine.GameObject));
    ---@type UnityEngine.GameObject
    local effect = CS.UnityEngine.Object.Instantiate(bgEffectPrefab, parent);
    effect.transform.position = self.m_CSBehaviour.transform.position;
end

function m:PlayUpAnim()
    self.animation:Play("up");
    LuaClass.AudioManager.Instance:PlayModuleSceneOneShot(LuaClass.ModuleType.TenonJump, "Logic_Jump");
end

function m:PlayDownAnim()
    self.animation:Play("down");
end

---@param startLayerTrans UnityEngine.Transform
function m:DieReset(startLayerTrans)
    local pos = self.m_CSBehaviour.transform.position;
    pos.y = startLayerTrans.position.y + 1.3;
    self.m_CSBehaviour.transform.position = pos;
    self.velocity = self.upVelocity;
    self.lastPassedLayerIndex = self.lastPassedLayerIndex - 1;
    self.relive = true;
    self:StopDie();
end

function m:PlayReborn()
    self.animation:Play("reborn");
end

return m;